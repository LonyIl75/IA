include('../auto')



/*
 * Contient les informations de la map (obstacles, cells, placement des Entity)
 */
class Map {
	static obstacles = []
	static cells = []
	static entityCells
	
	/*
	 * Fonction d'initialisation, initialise les Cellules Cell, et pour chaque Cell, les obstacles et leurs voisins.
	 */
	static init(){
		for(var i = 0; i < 613; i++) Map.cells[i] = new Cell(i)
		for(var i in getObstacles()) Map.obstacles[Map.cells[i]]=true
		for(var cell in Map.cells) cell.init()
	}
	
	/*
	 * Actualise la map contenant l'emplacement sous forme de Cell des Entity vivantes
	 */
	static refresh(){
		Map.entityCells = []
		for(var entity in Fight.getAllAlive()){
			// FIXME à vérif mais je pense qu'il faut que je m'ignore là, je me bloque jamais moi mm non ?
			if(entity==Fight.self) continue
			Map.entityCells[entity.cell] = entity
		}
		Fight.refreshEntities() // init des entities après avoir refresh les positions sur la map
	}
	
	/*
	 * Renvoie un objet Cell correspondant à l'id de la cellule
	 * @param id id de la cellule
	 * @return Cell
	 */	
	static getCell(id) {
		if(id==null) return null // sinon ça retourne la cell 0 !
		return Map.cells[id]
	}
	
	/*
	 * Colorie des cellules pour des tests / debugs.
	 * @param cells tableau de Cell
	 * @param color couleur choisie pour colorier les cellules
	 */	
	static color(cells, color) {
		if(typeOf(cells) != TYPE_ARRAY){
			if(cells instanceof Cell) mark(cells.id, color)
			else mark(cells, color)
		}else{
			for(var cell in cells){
				if(cell instanceof Cell) mark(cell.id, color)
				else mark(cell, color)
			}
		}
	}
	
	/*
	 * colorie des cellules accessibles en fonction des mp pour des tests / debugs.
	 * @param cells tableau de Cell
	 * @param color couleur choisie pour colorier les cellules
	 */
	static colorKey(cells, color){
		for(var cell:var mp in cells){
			if(cell instanceof Cell){
				mark(cell.id, color)
				markText(cell.id, mp)	
			} else {
				mark(cell, color)
				markText(cell, mp)
			}
			
		}
	}
}
