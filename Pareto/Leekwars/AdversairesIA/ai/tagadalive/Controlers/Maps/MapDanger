include('../../auto')

/*
 *  Ensemble de méthodes et d'algorithmes permettant de calculer le Danger et les maps de dommages
 */

/*
 *  Ensemble de méthodes et d'algorithmes permettant de calculer le Danger et les maps de dommages
 */
class MapDanger {
	// cache du danger estimé sur la case, reset à chaque tour, pour la v1 du danger, sera amener à évoluer quand on améliorera la map
	static _danger = [] // [cell:danger]
	static _hash_danger = [] // [consequences.hash:[cell:danger]]
	
	// cache contenant pour chaque item, pour chaque case, les cases qu'on peut toucher si rien ne bloque la LOS
	// ne doit pas être reset en début de tour, l'info reste valide, et est lazyloader à la demande.
	static _cache_item_targetableCells = [] // [item:[fromCell:[targetCells]]]
	
	// cache contenant pour chaque ally, pour chaque item, pour chauqe case, les cases qu'on peut toucher, en prenant en compte la LOS
	// doit être refresh à chaque tour, car on prend en compte la LOS
	// TODO faire des tests de performances quand on rencontrera des problèmes d'opérations, c'est surement nettement + couteux...
	static _cache_allies_item_targetableCells = [] // [ally:[item:[fromCell:[targetCells]]]]
	
	// cache pour chaque enemy des maps des cases où il peut tirer
	// refresh à chaque tour
	static _map_entity_item_danger = [] // [e:[item:[cell:ratio]]]
	
	/*
	 * Actualise les informations en fonctions des enemies et alliés encore vivant 
	 */
	static refresh(){
		// reset du cache
		_danger = []
		_hash_danger = []
		_map_entity_item_danger = []
		// pour chaque adv
		for(var e in Fight.getEnemiesAlive()){
			_map_entity_item_danger[e] = [];//reset de la map
			e.offensiveItems = Items.getOrderedOffensiveItems(e)
			// pour chaque item offensif
			for(var item : var dmgPerTp in e.offensiveItems){
				// on trouve les cases qu'il peut toucher avec son item
				_map_entity_item_danger[e][item] = MapDanger.getEnemiesDmgMap(e, item)
			}
		}
		_cache_allies_item_targetableCells = []
		// pour chaque ally
		for(var a in Fight.getAlliesAlive()){
			_map_entity_item_danger[a] = [];//reset de la map
			for(var e in Fight.getEnemiesAlive()){
				// on récup les items offensif pour chaque adv
				a.offensiveItemsByTargets[e] = Items.getOrderedOffensiveItems(a, e)
			}
			// pour chaque set d'items, chaque item, on récup la map des cases touchables
			for(var offensiveItems in a.offensiveItemsByTargets){
				for(var item : var dmgPerTp in offensiveItems){
					_map_entity_item_danger[a][item] = MapDanger.getAlliesDmgMap(a, item)
				}
				break
			}
		}
	}
	
	/*
	 * Calcule le danger d'une Cell, version sans Conséquences
	 * @param <Cell> cell la case sur laquel on veut le danger
	 * @return <Danger>
	 */
	static getCellDanger(cell){
		return MapDanger.getCellDanger(cell, null)
	}
		
	/*
	 * renvoie le cache du danger d'une Cell, la calcule si elle n'a pas déjà été calculé.
	 * @param cell Cellule sur laquelle le danger va être calculé
	 * @param consequences Consequences qui contient les altérations de la série d'action précédente dans le combo
	 * @return un objet <Danger>
	 */
	static getCellDanger(cell, consequences) {
		if(consequences && consequences.isAlteringDanger){
			if(!_hash_danger[consequences.hashcode]) _hash_danger[consequences.hashcode] = []
			if(!_hash_danger[consequences.hashcode][cell]){
				_hash_danger[consequences.hashcode][cell] = Damages.computeDanger(cell, consequences)
			}
			return _hash_danger[consequences.hashcode][cell]
		}else{
			if(!_danger[cell]) {
				_danger[cell] = Damages.computeDanger(cell, null)
			}
			return _danger[cell]
		}
	}

	/*
	 * Pour les cellules accessible par l'allié, initialise un tableau contenant les cases qu'il peut cibler avec l'item passé en paramètre
	 * @info cette fonction est appelé pour chaque items de l'allié
	 * @param ally Entity allié
	 * @item Item item
	 * @return map de Cells ciblables par l'Entity ally
	 */
	static getAlliesDmgMap(ally, item){
		var map = []//, map_mp = []
		for(var cell:var dist in ally.reachableCells){
			if(dist > ally.mp) break
			var targetableCells = MapDanger.getAlliesTargetableCells(item, cell);
			for(var c in targetableCells){
				if(map[c]==null){
					map[c]=1;//coef
					//map_mp[cell]=dist;
				}
			}
		}
		//aoe TODO
		
		return map // TODO add map_mp
	}

	/*
	 * Retourne les Cells pouvant être touché depuis la @cell avec l'@item (prend en compte les los)
	 * @param item Item
	 * @param cell une Cellule accesible par l'entité en question
	 * @return cache sous forme de double tableau
	 */
	static getAlliesTargetableCells(item, cell){ // TODO add ignoreleeks to ignore leeks who play before
		// init du cache si nécessaire
		if(MapDanger._cache_allies_item_targetableCells[item]==null) 
			MapDanger._cache_allies_item_targetableCells[item] = []
		if(MapDanger._cache_allies_item_targetableCells[item][cell]==null){
			MapDanger._cache_allies_item_targetableCells[item][cell] =
				Targets.getTargetableCells(item, cell, [])
		}
			
		return MapDanger._cache_allies_item_targetableCells[item][cell];
	}
		
	
		
		
	/*
	 * Pour les cellules accessible par l'ennemi, initialise un tableau contenant les cases qu'il peut cibler avec l'item passé en paramètre
	 * @info cette fonction est appelé pour chaque items de l'ennemi'
	 * @param enemy Entity ennemi
	 * @item Item item
	 * @return map de Cells ciblables par l'Entity enemy
	 */
	static getEnemiesDmgMap(enemy, item){
		var map = []//, map_mp = []
		for(var cell:var dist in enemy.reachableCells){
			if(dist > enemy.mp) break
			var targetableCells = MapDanger.getEnemiesTargetableCells(item, cell);
			for(var c in targetableCells){
				if(map[c]==null){
					map[c]=1;//coef
					//map_mp[c]=dist;
				}
			}
		}
		
		//aoe TODO AREA_PLUS_, AREA_X_, AREA_SQUARE_
		if(item.area==AREA_CIRCLE_1 || item.area==AREA_CIRCLE_2 || item.area==AREA_CIRCLE_3){
			for(var distance = 1; distance<=item.area-2; distance++){ // ici trick pour réduire les opé, par du principe que AREA_CIRCLE_1 = 3 et AREA_CIRCLE_3 = 5
				var ratio = 1 - 0.2 * distance
				if(ratio ==0) break;
				var circle = [];
				for(var c:var value in map){
					if(value>0)
						for(var cell in c.neighborsObstacles)
							if(map[cell]==null || map[cell]==0) push(circle, cell);
				}
				for(var cell in circle){
					map[cell] = ratio;
					//map_mp[cell] = eMp;
				}
			}
		}
		
		return map // TODO add map_mp
	}
	
	/*
	 * Retourne les Cells pouvant être touché avec le parametre item par les ennemis, ignore la los
	 * ce qui permet de garder en cache le résultat pour des bonnes perfs
	 * @see getAlliesTargetableCells
	 * @param item Item
	 * @param cell une Cellule accesible par l'entité en question
	 */
	// TODO memoisé lineOfSight ignoring allEntitiesId
	// fonction avec cache qui considère que los est tjr pareil.
	static getEnemiesTargetableCells(item, cell){
		// init du cache si nécessaire
		if(MapDanger._cache_item_targetableCells[item]==null) MapDanger._cache_item_targetableCells[item] = []
		if(MapDanger._cache_item_targetableCells[item][cell]==null){
			MapDanger._cache_item_targetableCells[item][cell] =
				Targets.getTargetableCells(item, cell, Fight.allEntitiesId)
		}
		return MapDanger._cache_item_targetableCells[item][cell];
	}
		
	static showDanger(from, mpleft, consequences) {
		var reachableCells = MapPath.getCachedReachableCells(from, mpleft, Fight.self.cellsToIgnore)
		var arrayDanger = []
		for(var c : var d in reachableCells) {
			var danger = MapDanger.getCellDanger(c, consequences)
			var red = (danger.dmg*255)/Fight.self.life
			if(red>255) mark(c, getColor(0, 0, 0))
			else mark(c, getColor(red, 255-red, 0))
			markText(c, round(danger.dmg))
			arrayDanger[round(danger.dmg)] = danger
		}
		/*for(var danger in arrayDanger){
			debug(danger)
		}*/
	}

}