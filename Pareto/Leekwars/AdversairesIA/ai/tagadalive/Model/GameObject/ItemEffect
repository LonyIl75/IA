/*
 * Objet contenant les effets calculés correspondants à un item de type Item
 */
class ItemEffect {
	name
	item
	type
	min
	max
	avg
	avgmax
	avgmin
	duration
	targets
	modifiers
	targetType
	stackable = false
	multiplyByTarget = false
	modifCaster = false
	irreductible = false
	notReplaceable = false
	constructor(effect, item, id){
		this.name = item.name+'-'+id
		this.item = item
		this.type = effect[0]
		this.min = effect[1]
		this.max = effect[2]
		this.avg = (effect[1]+effect[2])/2
		this.avgmax = (effect[1]+effect[2]*3)/4
		this.avgmin = (effect[1]*3+effect[2])/4
		this.duration = effect[3] == 0 ? 1 : effect[3]
		this.targets = effect[4]
		this.modifiers = effect[5]
		// désigne le type de cible intéressante pour cet effet
		this.targetType = TargetType(this)
		if(this.modifiers & EFFECT_MODIFIER_STACKABLE) this.stackable = true 
		if(this.modifiers & EFFECT_MODIFIER_MULTIPLIED_BY_TARGETS) this.multiplyByTarget = true
		if(this.modifiers & EFFECT_MODIFIER_ON_CASTER) this.modifCaster = true
		if(this.modifiers & EFFECT_MODIFIER_IRREDUCTIBLE) this.irreductible = true
		if(this.modifiers & EFFECT_MODIFIER_NOT_REPLACEABLE) this.notReplaceable = true
	}
	
	/*
	 * Format chaîne de caracteres utilisée pour des tests / debugs.
	 */
	string() {
		return "<ItemEffect "+this.name+">"
	}
}