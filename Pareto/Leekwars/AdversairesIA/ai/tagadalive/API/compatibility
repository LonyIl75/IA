include('../auto')

global compa = false 
global _getWeapon = clone(getWeapon)
getWeapon = function(entity){
	if(entity instanceof Entity) return _getWeapon(entity.id)
	else {
		if(compa)debugW('getWeapon should always be called with an <Entity> and not int')
		return _getWeapon(entity)
	}
}

global _setWeapon = clone(setWeapon)
setWeapon = function(item){
	if(item instanceof Item) return _setWeapon(item.id)
	else {
		if(compa)debugW('setWeapon should always be called with an <Item> and not int')
		return _setWeapon(item)
	}
}

global _getCellDistance = clone(getCellDistance)
getCellDistance = function(c1, c2){
	if(c1 instanceof Cell && c2 instanceof Cell) return _getCellDistance(c1.id, c2.id)
	else {
		if(compa)debugW('getCellDistance should always be called with <Cell> and not int')
		return _getCellDistance(c1, c2)
	}
}

global _lineOfSight = clone(lineOfSight)
lineOfSight = function(c1, c2, entityToIgnore){
	if(c1 instanceof Cell && c2 instanceof Cell) return _lineOfSight(c1.id, c2.id, entityToIgnore)
	else {
		if(compa)debugW('lineOfSight should always be called with <Cell> and not int')
		return _lineOfSight(c1, c2, entityToIgnore)
	}
}

global _isEmptyCell = clone(isEmptyCell)
isEmptyCell = function(cell){
	if(cell instanceof Cell) return _isEmptyCell(cell.id)
	else {
		if(compa)debugW('isEmptyCell should always be called with <Cell> and not int')
		return _isEmptyCell(cell)
	}
}

global _getEntityOnCell = clone(getEntityOnCell)
getEntityOnCell = function(cell){
	if(cell instanceof Cell) return _getEntityOnCell(cell.id)
	else {
		if(compa)debugW('getEntityOnCell should always be called with <Cell> and not int')
		return _getEntityOnCell(cell)
	}
}

global _getCooldown = clone(getCooldown)
getCooldown = function(item, entity){
	if(item instanceof Item && entity instanceof Entity) return _getCooldown(item.id, entity.id)
	else {
		if(compa)debugW('getCooldown should always be called with <Item> and <Entity> and not int')
		return _getCooldown(item, entity)
	}
}

global _moveTowardCell = clone(moveTowardCell)
moveTowardCell = function(cell){
	if(cell instanceof Cell) return _moveTowardCell(cell.id)
	else {
		if(compa)debugW('moveTowardCell should always be called with <Cell> and not int')
		return _moveTowardCell(cell)
	}
}

global _getCellsToUseWeaponOnCell = clone(getCellsToUseWeaponOnCell)
getCellsToUseWeaponOnCell = function(item, cell, ignoredCells){
	if(item instanceof Item && cell instanceof Cell) return _getCellsToUseWeaponOnCell(item.id, cell.id, ignoredCells)
	else {
		if(compa)debugW('getCellsToUseWeaponOnCell should always be called with <Item> and <Cell> and not int')
		return _getCellsToUseWeaponOnCell(item, cell, ignoredCells)
	}
}

global _getCellsToUseChipOnCell = clone(getCellsToUseChipOnCell)
getCellsToUseChipOnCell = function(item, cell, ignoredCells){
	if(item instanceof Item && cell instanceof Cell) return _getCellsToUseChipOnCell(item.id, cell.id, ignoredCells)
	else {
		if(compa)debugW('getCellsToUseChipOnCell should always be called with <Item> and <Cell> and not int')
		return _getCellsToUseChipOnCell(item, cell, ignoredCells)
	}
}

function getCellsToUseItemOnCell(item, cell, ignoredCells){
	if(item instanceof Item)
		return item.isWeap ? getCellsToUseWeaponOnCell(item, cell, ignoredCells) : getCellsToUseChipOnCell(item, cell, ignoredCells)
	else
		if(compa)debugE('getCellsToUseItemOnCell MUST be called with <Item> and not int')
}

global _getWeaponTargets = clone(getWeaponTargets)
getWeaponTargets = function(item, cell) {
	if(item instanceof Item && cell instanceof Cell) return _getWeaponTargets(item.id, cell.id)
	else {
		if(compa)debugW('getWeaponTargets should always be called with <Item> and <Cell> and not int')
		return _getWeaponTargets(item, cell)
	}
}

global _getChipTargets = clone(getChipTargets)
getChipTargets = function(item, cell) {
	if(item instanceof Item && cell instanceof Cell) return _getChipTargets(item.id, cell.id)
	else {
		if(compa)debugW('getChipTargets should always be called with <Item> and <Cell> and not int')
		return _getChipTargets(item, cell)
	}
}

function getItemTargets(item, cell){
	if(item instanceof Item && cell instanceof Cell){
		var targetsId = item.isWeap ? getWeaponTargets(item, cell) : getChipTargets(item, cell)
		var targets = []
		for(var targetId in targetsId){
			if(targetId == Fight.self.id && cell != Fight.self.cell ) continue // skip moi mm si c'est pas getEntity()cast
			// TODO better, handle minrange & fromcell ?
			push(targets, Fight.getEntity(targetId))
		}
		return targets
	} 
	else if(compa)debugE('getItemTargets MUST be called with <Item> and <Cell>, not int')
}

global _mark = clone(mark)
mark = function(cell, color) {
	if(cell instanceof Cell) return _mark(cell.id, color)
	else {
		if(compa)debugW('mark should always be called with <Cell> and not int')
		return _mark(cell, color)
	}
}

global _markText = clone(markText)
markText = function(cell, text) {
	if(cell instanceof Cell) return _markText(cell.id, text)
	else {
		if(compa)debugW('markText should always be called with <Cell> and not int')
		return _markText(cell, text)
	}
}
