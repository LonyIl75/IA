

class Benchmark{
	static _DEBUG = true
	
	static _debug_operation
	static _count_func = [];
	static _cumul_func = [];
	static _laststart_func = [];
	
	// mesure d'opération simple
	static startOp(){
		_debug_operation = getOperations();
	}
	static stopOp(title){
		if(_DEBUG) debug(title + ": " + (getOperations()-_debug_operation-5-length(title)));	
	}
	static stopOpk(title){
		if(_DEBUG) debug(title + ": " + round((getOperations()-_debug_operation)/1000) + "k");
	}
	
	// mesure de consommation d'opération moyenne d'une fonction
	static reset(){
		_count_func = [];
		_cumul_func = [];
		_laststart_func = [];
	}
	static start(name){
		//Crée l'entrée pour ne pas avoir de surcout pour la création de la clé à la fin
		_laststart_func[name] = 0;
		if(_count_func[name]==null) _count_func[name]=0;
		if(_cumul_func[name]==null) _cumul_func[name]=0;
		_laststart_func[name] = getOperations();
	}
	static stop(name){
		_cumul_func[name] += getOperations() - _laststart_func[name] - 5;
		_count_func[name]++;
	}
	static display(){
		var str = "BENCHMARK Turn " + getTurn()
		for(var name:var nbCall in _count_func){
			str+= "\n" + name + ": " + nbCall + " call. Moy= " + Benchmark.format(_cumul_func[name]/nbCall) + " Total= " + Benchmark.format(_cumul_func[name])
		}
		debug(str)
	}
	
	static format(num){
		num = num | 0
		if(num >= 1000){
			var mega = floor(num/1000000)
			var kilo = round((num-(mega*1000000))/1000)
			var formated = (mega>0?mega+" ":"") + kilo + "k"
			return formated
		}else return num
	}
}
